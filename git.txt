//新建一个隐藏的文件夹，初始化一个Git工程，便于版本控制，里面分是三个区域：工作区 缓存区 仓库
//git工作流程：在工作区编辑文件产生变化，添加文件变化到缓存区，保存文件的变化到仓库
git init 
git config --global user.name "hanlt"
git config --global user.email "hanlt1225@163.com"
创建SSH Key  C:\Users\My\.ssh
ssh-keygen -t rsa -C "hanlt1225@163.com"
git --version //验证是否成功


//查看工作区以及缓存区的状态
git status 
git add  文件名  添加工作区的文件到缓存区
git rm   文件名
git checkout -- test.txt  恢复删除的


//实例
//1 创建一个空文件  查看状态
touch test.txt 
git status 
//2 将文件添加到缓存区 查看状态
git add test.txt
git status
//3 将这个文件提交到仓库 查看状态
git commit -m "init"
git status 


//diff 比较工作区和缓存区的不同
//1 编辑test.txt 里面加入内容后执行下,会看见工作区加入了刚刚加入的数据
git diff test.txt

//2 将其添加到缓存区并提交
git add test.txt 
git commit -m "add three lines"

//3 再次编辑test.txt文件执行下面
git diff test.txt
//备注： diff 命令是比较工作区和缓存区的，如果2步骤中commit之后缓存区就空了，当缓存区为空，比较的是仓库区中最新commit提交的数据

展示之前所有的commit历史
git log
git log --pretty=oneline  -- 简单显示
git reglog  -- 查看命令历史

//版本回退
//1 HEAD 当前所在的commit称为 HEAD,当前最新版本 commit，大部分情况下，最后一次提交的commit 就是HEAD commit ,简称HEAD
//显示head 
git show head

//2 编辑工作区后想退回之前的状态
git checkout head test.txt

//3 将文件从缓存区中撤回（编辑后 add了，但是没有commit）
git reset head test.txt

//4 reset 改变head位置（工作区的内容不变，只是把head拉回原来的版本）
git reset  cc99e  （此串是commit的 键值缩写，git log 可以看见）

//回退上一个版本  head^   上上一个版本 head^^
git reset --hard head^         head~100 上一百个版本
//

//4checkout 撤回的更加彻底，直接将版本回退到那个版本，工作区的内容也直接回退到改版本
git checkout cc99e
git checkout -- test.txt  丢弃之前的修改

小结
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD
       	<file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


----------------------------------------分支部分------------------------------------------------
//head指向当前分支 ，分支执行提交

//查看分支 创建分支 删除分支
查看分支
git branch    // * 代表当前所在的分支

//创建分支  在master(主分支) 上创建分支  完全copy了主分支
git branch branch_1
//切换分支
git checkout branch_1

//或者如下  一起做 创建+切换
git checkout -b branch_1

//合并分支  merge   Fast-forward 快速合并，这种合并没有冲突，直接把master指针指向branch_1分支上
git checkout master
git merge branch_1
//合并后 就可以删除分支了
git branch -d branch_1

//checkout   和 switch(比较新)
//创建并切换分支
git switch -c branch_1
//切换分支
git switch master
//使用新的git switch命令，比git checkout要更容易理解。

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


###########解决冲突

//实例第一步：创建并切换分支  编辑里面的文件内容后  add commit
git switch -c feature1
//实例第二步：切换到master分支 并编里面的同一文本内容 add commit
git switch master
//实例第三步：master分支和feature1分支各自都分别有新的提交 合并分支 会报错
git merge feature1
//实例第四步：手动修改文件冲突后错误内容 再次add commit
git add 文件名
git commit -m "文件描述"
//查看日志 删除分支
git log --graph --pretty=oneline --abbrev-commit
git branch -d feature1

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。

###########分支管理策略  禁用Fast forward模式 （这样就保留了分支信息）
//创建并切换分支
git switch -c dev
//分支上修改提交文件
git add readme.txt 
git commit -m "add merge"
//切回 分支
git switch master
//合并分支 --no-ff参数，表示禁用Fast forward，本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
git merge --no-ff -m "merge with no-ff" dev

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
干活都在dev分支上，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
最后你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
小结
Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

########### bug 分支
// 场景描述：开发人员在分支dev上开发，但代码不能提交， 临时又需要修改原有的bug
//第一步：把当前工作现场“储藏”起来
git stash
//第二步：查看工作区是否干净，然后想在哪个分支上进行修改bug，切换到该分支并创建临时分支
git checkout master
git checkout -b issue-101   //创建临时分支
//第三步：修改bug
git add readme.txt
git commit -m "fix bug 101"
//第四步：切换到master分支，并完成合并，最后删除issue-101分支
git switch master
git merge --no-ff -m "merged bug fix 101" issue-101
//第五步：回到dev分支继续干活
git switch dev
git status
//第六步：查看工作现场列表
git stash list
//第七步：恢复原工作现场  恢复后 git stash list  就没有了
git stash apply  //恢复后，stash内容并不删除，需要用git stash drop来删除
或
git stash pop    //恢复的同时把stash内容也删了

//加项 可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}

//第八步：同时需要修改在dev上的bug(因为dev的分支从master上分出来的)
          //把master上commit提交bug的id复制到dev上就可以了
git cherry-pick 4c805e2(commit的id)     //在dev分支上操作		  

小结
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

########### Feature 分支  新功能分支
添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
//新建切换
git switch -c feature-vulcan
//切回dev，准备合并
git switch dev
//不合并了，删除分支
git branch -d feature-vulcan
error: The branch 'feature-vulcan' is not fully merged.
If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
//需要强行删除
git branch -D feature-vulcan
小结
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

//分支推送 指定那个分支  
git push origin dev
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！


########### 抓取分支
//多人协作时，大家都会往master和dev分支上推送各自的修改
//第一步：从远程仓库 clone，克隆后默认只有master
git clone https://github.com/hltcoffee/h_repository1.git
//第二步：本地手动创建 dev分支
git checkout -b dev origin/dev
//第三步：当前登录人 就可以add commit 后push到远程了
git add env.txt
git commit -m "add env"
git push origin dev

//第四步：另一个人也修改了env.txt文件
cat env.txt
git add env.txt
git commit -m "add new env"
git push origin dev
推送失败

//第五步：解决方式是先从远程的origin/dev上抓下来，要指定本地dev分支与远程origin/dev分支的链接，在pull
git branch --set-upstream-to=origin/dev dev
git pull
//第六步：抓下来的和本地的有冲突，用冲突解决方式(手动修改文件冲突部分)，再提交后push
git commit -m "fix env conflict"
git push origin dev

多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

###########rebase
//分叉的提交变成直线 三步  抓取  变直  推送
 git pull
 git rebase
 git push origin master
 git log --graph --pretty=oneline --abbrev-commit
 
小结
rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。


----------------------------------------分支部分------------------------------------------------

----------------------------------------团队协作部分------------------------------------------------
//团队协作 克隆   cloneGit 就是远程仓库 专属名词 origin
git clone git_base cloneGit

//fetch  将远程仓库拉取到origin/master的分支 git branch看不见 但是存在 这个分支合并到主分支，就与远程一致了
git fetch 
git merge origin/master

//push  将分支push给远程仓库
git branch ori_branch_1
git push origin ori_branch_1


//协作工作流程 
1 第一次克隆或fetch和merge操作，保持与远程同步
2 必须创建一个新的分支
3 开发
4 fetch merge操作 再次与远程同步
5 将分支push给远程、


第一次修改 -> git add -> 第二次修改 -> git commit    备注： 这里面的commit 提交的是add后的缓存区的内容，修改文件但是没有add，是不会提交到仓库中


//同步到远程仓库
//（本地已存在仓库 ，然后同步本地到远程）
//第1步：创建SSH Key id_rsa（私钥）和id_rsa.pub（公钥） 是SSH Key的秘钥对
         ssh-keygen -t rsa -C "hltcoffee@163.com"
//第2步：登陆GitHub，打开“Account settings”  点“Add SSH Key” Key文本框里粘贴id_rsa.pub文件的内容
//第3步：在GitHub上创建仓库Create a new repo
//第4步：执行下面 就可以和GitHub 远程仓库进行关联
         git remote add origin https://github.com/hltcoffee/h_repository1.git
//第5步：把本地仓库推送到 远程仓库   加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
         //还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
         git push -u origin master
//第6步：实时同步   从现在起，只要本地作了提交，就可以通过命令：
		 git push origin master   //把本地master分支的最新修改推送至GitHub
	
提示： 可以先创建远程仓库，然后 clone到本地
       git clone  https://github.com/hltcoffee/h_repository2.git
		 
git 出现错误 Could not resolve host: github.com
在  C:\Windows\System32\drivers\etc  host文件里面加入下面内容
192.30.255.112  github.com  //github地址

SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.

//查看远程库的信息
git remote
git remote -v  //显示更详细的信息
----------------------------------------团队协作部分------------------------------------------------


// 创建标签   git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag v1.0
// 创建标签并做备注信息  git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -a v1.1 -m “标签的备注信息”
//查看所有标签
git tag
//显示单个标签的详细信息
git show v1.1
//删除标签  创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
git tag -d v1.1

//推送某个标签到远程
git push origin v1.0
//一次性推送全部尚未推送到远程的本地标签
git push origin --tags
//标签已经推送到远程,删除远程标签步骤
//第一步 删除本地标签
git tag -d v0.9
//第二步 删除远程标签
git push origin :refs/tags/v0.9
//第三步 登录GitHub是否删除

//克隆GitHub上的项目 
访问要克隆的项目主页 -- >点击Fork(右上角)-- > 本地登录账号-- >git clone https://github.com/hltcoffee/bootstrap.git
//推给官网 Pull requests

----------------------------------使用gitee--------------------------------------------------------------
//关联远程仓库
git remote add origin https://github.com/hanlt1225/h_repository1.git
可以正常地用git push和git pull推送了
//git remote add时报错  origin already exists.
git remote -v //查看远程
//删除已有的GitHub远程库：
git remote rm origin
//在关联gitee
git remote add origin https://gitee.com/hanlt1225/repository_1
//git remote -v //查看关联的远程

// github和gitee都想用
// 第一步：删除本地的远程仓库
git remote rm origin
// 第二步： 关联GitHub的仓库  
git remote add github https://github.com/hanlt1225/h_repository1.git
// 第三步： 关联gitee仓库
git remote add gitee https://gitee.com/hanlt1225/repository_1
// 第四步：查看关联的远程仓库
git remote -v
// 第五步：推送分支到远程仓库
git push github master
git push gitee master

//自定义Git  标上颜色
git config --global color.ui true

//忽略特殊文件  .gitignore
//你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：
git add App.class
//想添加该文件，可以用-f强制添加到Git：
git add -f App.class
//可能是.gitignore写得有问题，需要找出来到底哪个规则写错
git check-ignore -v App.class


小结
忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

//配置别名  --global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
//撤销
git config --global alias.unstage 'reset HEAD'
即是
git unstage test.py
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

//--global 表示当前电脑上所有的仓库都能用；去掉的话只能本仓库能用
git config alias.last 'log -1'
//查看别名的配置文件
cat .git/config
//显示如下
[alias]
        last = log -1
		
//而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中： git/bash 需要切换到该文件目录下C:\Users\My
cat .gitconfig  --显示全局的别名信息

//搭建git服务器
https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664
























